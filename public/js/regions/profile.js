// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Marionette, Profile, ProfileRegion, ProfileView, Router, vent, _ref;
    Marionette = require('marionette');
    vent = require('vent');
    Router = require('router');
    Profile = require('models/profile');
    ProfileView = require('views/profile');
    return ProfileRegion = (function(_super) {
      __extends(ProfileRegion, _super);

      function ProfileRegion() {
        this.handleError = __bind(this.handleError, this);
        this.fetchProfile = __bind(this.fetchProfile, this);
        this.initialize = __bind(this.initialize, this);
        _ref = ProfileRegion.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ProfileRegion.prototype.el = '#profile';

      ProfileRegion.prototype.initialize = function(options) {
        var profile,
          _this = this;
        this.listenTo(vent, 'hero:load', function(battleTag, heroId) {
          var route;
          if ((battleTag != null) && (heroId != null)) {
            return _this.fetchProfile(battleTag, heroId);
          } else if (!heroId) {
            _this.fetchProfile(battleTag);
            route = "profile/" + (battleTag.toLowerCase().replace('#', '-'));
            return Router.navigate(route);
          }
        });
        profile = new Profile();
        this.profileView = new ProfileView({
          model: profile,
          region: this
        });
        return this.show(this.profileView);
      };

      ProfileRegion.prototype.fetchProfile = function(battleTag, heroId) {
        var profile,
          _this = this;
        profile = new Profile({
          battleTag: battleTag
        });
        vent.trigger('loading');
        return profile.fetch({
          dataType: 'jsonp',
          success: function(model, res) {
            if (res.code === 'NOTFOUND') {
              vent.trigger('loading');
              return _this.handleError();
            }
            profile.setStrings();
            _this.profileView = new ProfileView({
              model: profile,
              region: _this
            });
            _this.show(_this.profileView);
            _this.profileView.$('.heroes').removeClass('is-hidden');
            if (heroId != null) {
              _this.profileView.$(".heroes [data-id='" + heroId + "']").click();
            }
            return vent.trigger('loading');
          },
          error: function(model, res) {
            return _this.handleError(res);
          }
        });
      };

      ProfileRegion.prototype.handleError = function(res) {
        if (res) {
          return console.log(res);
        } else {
          return alert('Battle.net Error: BattleTag not found');
        }
      };

      return ProfileRegion;

    })(Marionette.Region);
  });

}).call(this);
