// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, Item, _ref;
    Backbone = require('backbone');
    return Item = (function(_super) {
      __extends(Item, _super);

      function Item() {
        this.span = __bind(this.span, this);
        this.setStrings = __bind(this.setStrings, this);
        this.initialize = __bind(this.initialize, this);
        _ref = Item.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Item.prototype.initialize = function(options) {
        this.options = options;
        return this.url = "http://us.battle.net/api/d3/data/" + this.options.itemTooltip;
      };

      Item.prototype.setStrings = function() {
        var blockAmount, gem, gems, max, min, slot, text, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5;
        if (this.get('armor')) {
          this.set({
            'uiValue': this.get('armor').max,
            'uiValueType': 'Armor'
          });
        }
        switch (this.options.itemSlot) {
          case 'leftFinger':
            slot = 'Finger';
            break;
          case 'rightFinger':
            slot = 'Finger';
            break;
          case 'offHand':
            slot = 'Off-Hand';
            break;
          default:
            slot = this.options.itemSlot;
        }
        if (this.get('dps')) {
          this.set({
            'uiValue': this.get('dps').max.toFixed(1),
            'uiValueType': 'Damage Per Second',
            'uiAPS': this.get('attacksPerSecond').max.toFixed(2)
          });
          if (this.get('type').twoHanded) {
            slot = '2-Hand';
          } else {
            slot = '1-Hand';
          }
        }
        if (this.get('blockChance')) {
          this.set('uiBlockChance', "" + ((this.get('blockChance').max * 100).toFixed(1)) + "%");
        }
        if ((_ref1 = this.get('attributesRaw')) != null ? _ref1.Block_Amount_Item_Min : void 0) {
          min = this.get('attributesRaw').Block_Amount_Item_Min.max.toFixed(0);
          max = +this.get('attributesRaw').Block_Amount_Item_Min.max.toFixed(0) + +this.get('attributesRaw').Block_Amount_Item_Delta.max.toFixed(0);
          blockAmount = min + "-" + max;
          this.set('uiBlockAmount', blockAmount);
        }
        this.set('uiSlot', slot);
        if ((_ref2 = this.get('attributes')) != null ? _ref2.primary : void 0) {
          this.set('uiAttrPrimary', this.span(this.get('attributes').primary, 'text'));
        }
        if ((_ref3 = this.get('attributes')) != null ? _ref3.secondary : void 0) {
          this.set('uiAttrSecondary', this.span(this.get('attributes').secondary, 'text'));
        }
        if ((_ref4 = this.get('attributes')) != null ? _ref4.passive : void 0) {
          this.set('uiAttrPassive', this.span(this.get('attributes').passive, 'text'));
        }
        if (this.get('gems') != null) {
          gems = [];
          _ref5 = this.get('gems');
          for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
            gem = _ref5[_i];
            if (gem.attributes.primary[0] != null) {
              text = gem.attributes.primary[0].text;
            } else if (gem.attributes.secondary[0] != null) {
              text = gem.attributes.secondary[0].text;
            }
            gem = {
              name: gem.item.name,
              icon: gem.item.icon,
              text: text,
              attrs: gem.attributesRaw
            };
            gems.push(gem);
          }
          return this.set('uiGems', gems);
        }
      };

      Item.prototype.span = function(source, prop) {
        var attr, attrs, _i, _len;
        attrs = [];
        for (_i = 0, _len = source.length; _i < _len; _i++) {
          attr = source[_i];
          attr[prop] = attr[prop].replace(/\.(?!\d)/, '').replace(/[{+}0-9\.?{%}]+/g, function(str) {
            return "<span>" + str + "</span>";
          });
          attrs.push(attr);
        }
        return attrs;
      };

      return Item;

    })(Backbone.Model);
  });

}).call(this);
